# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    temp                                               :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: mjoundi <mjoundi@student.42.fr>            +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/09/18 15:22:05 by marvin            #+#    #+#              #
#    Updated: 2024/09/25 19:52:14 by mjoundi          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "minishell.h"

int	pipe_check(char *str)
{
	int		i;
	char	q;

	i = 0;
	while (str[i] != '\0')
	{
		if (str[i] == '"' || str[i] == '\'')
		{
			q = str[i];
			i++;
			while (str[i] != q && str[i] != '\0')
				i++;
			if (str[i] == q)
				i++;
		}
		else if (str[i] == '|')
			return (1);
		else
			i++;
	}
	return (0);
}

int	check_after_pipe(char *str)
{
	int	i;

	i = 0;
	while (str[i] != '\0' && str[i] == ' ')
		i++;
	if (str[i] == '|' || str[i] == '\0')
		return (-1);
	return (1);
}

int	pipe_count(char *str)
{
	int	i;
	int	c;

	i = 0;
	c = 0;
	while (str[i] != '\0')
	{
		if (str[i] == '|')
			c++;
		i++;
	}
	return (c);
}

void	ini_pipe(int *i, int **tab, char *str, char ***cmds)
{
	*i = 0;
	(*tab)[1] = 0;
	*cmds = malloc((pipe_count(str) + 2) * sizeof(char *));
	while (str[*i] != '\0' && str[*i] == ' ')
		(*i)++;
	if (str[*i] == '|')
	{
		printf("bash: syntax error near unexpected token `|'\n");
		free(*cmds);
		*cmds = NULL;
	}
	(*tab)[0] = *i;
}

int	fill_cmds(char *str, int *i, int **tab, char ***cmds)
{
	if (check_after_pipe(str + *i + 1) == -1)
	{
		printf("bash: syntax error near unexpected token `|'\n");
		return (0);
	}
	(*cmds)[(*tab)[1]++] = ft_substr(str, (*tab)[0], *i - (*tab)[0]);
	(*i)++;
	while (str[*i] != '\0' && str[*i] == ' ')
		(*i)++;
	(*tab)[0] = *i;
	return (1);
}

void	p_q(int *i, char *str)
{
	char	q;

	q = str[*i];
	(*i)++;
	while (str[*i] != q && str[*i] != '\0')
		(*i)++;
	if (str[*i] == q)
		(*i)++;
}

char	**parse_pipe(char *str)
{
	int		i;
	char	**cmds;
	int		*tab;

	tab = malloc(2 * sizeof(int));
	cmds = NULL;
	ini_pipe(&i, &tab, str, &cmds);
	if (cmds == NULL)
		return (free(tab), NULL);
	while (str[i] != '\0')
	{
		if (str[i] == '"' || str[i] == '\'')
			p_q(&i, str);
		else if (str[i] == '|')
		{
			if (fill_cmds(str, &i, &tab, &cmds) == 0)
			{
				cmds[tab[1]] = NULL;
				free_args(&cmds);
				return (free(tab), NULL);
			}
		}
		else
			i++;
	}
	cmds[tab[1]] = ft_substr(str, tab[0], i - tab[0]);
	cmds[tab[1] + 1] = NULL;
	return (free(tab), cmds);
}

int	check_token_err(char **cmds)
{
	t_redtools	*red;
	char		*temp;
	int			i;
	int			es;

	i = 0;
	es = 0;
	while (cmds[i] != NULL)
	{
		temp = ft_strdup(cmds[i]);
		red = red_after_cmd(&temp, &es);
		if (red == NULL)
			return (free(temp), 0);
		free(temp);
		free_red(red);
		i++;
	}
	return (1);
}

int	pipe_fork(t_pipetools *pt)
{
	if (pt->i < pt->num_cmds - 1)
	{
		if (pipe(pt->pipefd) == -1)
		{
			perror("pipe");
			return (0);
		}
	}
	pt->pid = fork();
	if (pt->pid == -1)
	{
		perror("fork");
		return (0);
	}
	return (1);
}

int	pipe_func(t_pipetools *pt, t_maintools *tools)
{
	int	t;

	if (pt->i > 0)
	{
		dup2(pt->prev_fd, STDIN_FILENO);
		close(pt->prev_fd);
	}
	if (pt->i < pt->num_cmds - 1)
	{
		dup2(pt->pipefd[1], STDOUT_FILENO);
		close(pt->pipefd[0]);
		close(pt->pipefd[1]);
	}
	tools->str = tools->cmds[pt->i];
	t = run_one_cmd(tools);
	if (t == 2)
		return (2);
	return (1);
}

int	pipe_main(t_pipetools *pt, t_maintools *tools)
{
	int	t;

	while (tools->cmds[pt->num_cmds] != NULL)
		pt->num_cmds++;
	while (tools->cmds[pt->i] != NULL)
	{
		if (pipe_fork(pt) == 0)
			return 0;
		if (pt->pid == 0)
		{
			t = pipe_func(pt, tools);
			exit(EXIT_SUCCESS);
		}
		else
		{
			if (pt->i > 0)
				close(pt->prev_fd);
			if (pt->i < pt->num_cmds - 1)
			{
				close(pt->pipefd[1]);
				pt->prev_fd = pt->pipefd[0];
			}
		}
		pt->i++;
	}
	if (t != 2)
		return (1);
	return (2);
}

void	run_pipes(t_maintools *tools)
{
	t_pipetools pt;
	int			t;

	pt.i = 0;
	pt.prev_fd = -1;
	tools->cmds = parse_pipe(tools->str);
	free(tools->str);
	if (tools->cmds == NULL)
	{
		tools->exit_status = 2;
		return;
	}
	if (check_token_err(tools->cmds) == 0)
	{
		tools->exit_status = 2;
		free_args(&tools->cmds);
		return;
	}
	pt.num_cmds = 0;
	t = pipe_main(&pt, tools);
	if (t == 0)
		return ;
	else if (t == 2)
		tools->exit
	pt.i = 0;
	while (pt.i < pt.num_cmds)
	{
		wait(&pt.status);
		pt.i++;
	}
	if (pt.prev_fd != -1)
		close(pt.prev_fd);
}

// int	main(void)
// {
// 	char *str = "echo jnde > jnde | >>>>>> |<  grep jnde";

// 	char **cmds =  parse_pipe(str);
// 	printf("%d\n\n",  check_token_err(cmds));
	
// 	return 0;
// }

// void	run_pipe(t_maintools *tools)
// {
	
// }

// void 	run_pipes(t_maintools *tools)
// {
// 	int		i;
// 	char	**cmds;

// 	i = 0;
// 	cmds = parse_pipe(tools->str);
// 	free(tools->str);
// 	while (cmds[i] != NULL)
// 	{
// 		tools->str = cmds[i];
// 		run_pipe(tools);
// 		i++;
// 	}
// }
